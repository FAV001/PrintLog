' Option Explicit
On Error Resume Next 

 dim version
'===========================================================================
'  Агент для передачи данных лог-файлов Powerchute
'===========================================================================
'----  Author    : Dmitry Sinyagin------------------------------------------
 version="2.03.15"
'===========================================================================

 dim objConnect,connectStr 
 dim dat_file
 dim log_file
 dim fso
 dim objWMIService,colItems,objItem, IPConfig,IPConfigSet,i
 dim Sql_server, user, password, terminal_name, Timer, LogWrite, TerminalType, PathToAgent
 dim TimerCount, TimerCountMax 
 dim Ip
 dim typeOS

'  описание класса с данными о электроснабжении
 Class apcDataObject 
    dim Date 		       ' Дата
    dim Time 		       ' Время
    dim MaximumLineVoltage     ' Максимальное напряжение между опросами
    dim MinimumLineVoltage     ' Минимальное напряжение  между опросами
    dim LineVoltage	       ' Текущее напряжение при опросе	
    dim OutputVoltage	       ' Напряжение на выходе	
    dim BatteryVoltage	       ' Напряжение на батареях
    dim OutputFrequency	       ' Частота напряжения в линии
    dim UPSLoad		       ' Нагрузка на ИБП	
    dim UPSInternalTemperature ' Температура батарей
    dim ProbeTemperature1      ' Температура проба 1
    dim ProbeHumidity1         ' Влажность проба 1
    dim ProbeTemperature2      ' Температура проба 1
    dim ProbeHumidity2         ' Влажность проба 2
    dim Ip 		       ' Ip-адрес	
    dim sId                    ' sId - уникальный идентификатор
 end Class

 Class apcEventObject 
    dim Date		       ' Дата
    dim EventCode	       ' Код
    dim Message		       ' Сообщение
    dim Ip 		       ' Ip-адрес	
    dim sId                    ' sId - уникальный идентификатор
 end Class

 Class apcDeviceSettings 
	dim terminal_id 
	dim ip 
	dim MinutesInterval 
	dim SecondsInterval 
        dim AudibleAlarm 
	dim LastBatteryReplacementMonth
	dim LastBatteryReplacementYear 
	dim ConnectionType
	dim pbe_login
	dim pbe_password
 end Class
 
 dim apcDevice			' настройики бесперебойника, тип APC
 dim UPSType			' Тип ИБП
 dim apcData			' набор данных по вольтажу
 dim eventData 			' набор данных по событиям
 dim Bias			' смещение времени в минутах от UTC
 dim ScriptDir                  ' путь до скриптов
 dim LastUpdate			' DATETIME последнего соединения узла с системой
 dim last_update_dat		' DATETIME последнего обновления log-данных 
 dim last_update_event		' DATETIME последнего обновления event-данных

  set apcData= new apcDataObject 
  set apcEvent= new apcEventObject 
  set apcDevice= new apcDeviceSettings 
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set objConnect = CreateObject("ADODB.Connection")
  Set WshShell=CreateObject("Wscript.Shell")
  ScriptDir = fso.GetParentFolderName(WScript.ScriptFullName)

'------------- SQL-поинты для выгрузки данных

  sql_server1="10.200.5.51"			' SQL-поинт1
  sql_server2="10.200.7.139"                    ' SQL-поинт2

  user="login_apc"
  password="Apc!134qwd31"
  base="SPMBASE"
  
'------------------ Пути до файлов данных для x64
 Path_To_APC_x64="C:\Program Files (x86)\APC\PowerChute Business Edition\agent"
 Path_To_Ippon_x64="C:\Program Files (x86)\MonitorSoftware"
 Path_To_apcupsd_x64="C:\apcupsd\etc\apcupsd"
  
'------------------- Пути до файлов данных для x32
 Path_To_APC_x32="C:\Program Files\APC\PowerChute Business Edition\agent"
 Path_To_Ippon_x32="C:\Program Files\MonitorSoftware"
 Path_To_apcupsd_x32="C:\apcupsd\etc\apcupsd"
  
function MakeSID(sId) 
 On Error Resume Next     
  sId = Replace(sId, " ", "") 
  sId = Replace(sId, ".", "") 
  sId = Replace(sId, "-", "") 
  sId = Replace(sId, ":", "") 
  sId = Replace(sId, "/", "") 
  MakeSID=sId
end function


' выдать ошибку Err
Function getErrorDescription(Err) 
 On Error Resume Next     
 if Err.Number > 0 Then
    getErrorDescription="Error # " & Err.Number & " was generated by " &  Err.Source & " " & Err.Description  & chr(13) & chr(10) 
 End If
end function


Function WriteLn(S) 
  On Error Resume Next     
 	WScript.Echo S &vbCrLf
end function



' запись в лог-файл
function log(sData)
  On Error Resume Next     
    dim ts
    dim objFSO
    dim strLogPath
    
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    strLogPath=ScriptDir & "\spmagent.log"
' предохраняемся от перезаполения  log-файлов
     If objFSO.FileExists(strLogPath) Then
	Set oLogFile=objFSO.GetFile(strLogPath)
 	  If oLogFile.Size>2500000 Then '~2500КB коррекция от переполнения
		objFSO.DeleteFile(strLogPath)
   	    End If
        End if	
             Set ts = objFSO.OpenTextFile(strLogPath, 8, True)
             ts.Write Now() & " " & sData &vbCrLf
            ts.Close
           WriteLn(sData)
       Set ts = Nothing 
    Set objFSO= Nothing 
End function


function debug(sData)
On Error Resume Next 
    if(logWrite=1) Then
	log(sData)
    End If
End function


Function GetIpAddress() 
On Error Resume Next     
 dim objWMIService
 dim IPConfigSet
 dim IP
  Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
  Set IPConfigSet = objWMIService.ExecQuery("Select IPAddress from Win32_NetworkAdapterConfiguration where IPEnabled=TRUE")
  For Each IPConfig in IPConfigSet
	' отсекаем сегмент 192. - применяемый на СУО
	 If Not IsNull(IPConfig.IPAddress) Then 
  	   If InStr(1,trim(IPConfig.IPAddress(LBound(IPConfig.IPAddress))),"192.") > 4 or InStr(1,trim(IPConfig.IPAddress(LBound(IPConfig.IPAddress))),"192.") = 0 Then 
             IP=IPConfig.IPAddress(LBound(IPConfig.IPAddress))
         End If
       End If
	 Wscript.Echo IPConfig.IPAddress(LBound(IPConfig.IPAddress)) & " " & InStr(1,trim(IPConfig.IPAddress(LBound(IPConfig.IPAddress))),"192.")
    Next
  set objWMIService=Nothing
 set IPConfigSet=Nothing
 GetIpAddress=IP
End Function



function LDate(date) 
  On Error Resume Next     
    LDate = Year(date) & "-" &  LNumber(Month(date)) & "-" & LNumber(Day(date))
end Function

function LNumber(D) 
  On Error Resume Next     
	 if(D) < 10 Then 
	     D="0" & D
	 end If
	LNumber=D
end Function

function LDateTime(date) 
  On Error Resume Next     
        Year_  =LNumber(Year(date)) 
	Month_ =LNumber(Month(date))
	Day_   =LNumber(Day(date))
	Hour_  =LNumber(Hour(date))
	Minute_=LNumber(Minute(date))
	Second_=LNumber(Second(date))
        LDateTime  = Year_ & "-" &  Month_ & "-" & Day_ & " " & Hour_ &  ":" & Minute_ & ":" & Second_
end Function

function FDateTime(date) 
  On Error Resume Next     
        Year_  =LNumber(Year(date)) 
	Month_ =LNumber(Month(date))
	Day_   =LNumber(Day(date))
	Hour_  =LNumber(Hour(date))
	Minute_=LNumber(Minute(date))
	Second_=LNumber(Second(date))
        FDateTime  = Year_ & "-" &  Month_ & "-" & Day_ & "-" & Hour_ &  "" & Minute_ & "" & Second_
end Function


'преобразователь TimeWritten в DateTime
function TimeWrittenToDateTime(TimeWritten) 
  On Error Resume Next     
dim year,month,day,hour,min,sec,result
  year = mid(TimeWritten,1,4)
  month= mid(TimeWritten,5,2)
  day  = mid(TimeWritten,7,2)
  hour = mid(TimeWritten,9,2)
  min  = mid(TimeWritten,11,2)
  sec  = mid(TimeWritten,13,2)
  result = year & "-" & month & "-" & day & " " & hour & ":" & min & ":" & sec
  debug( "DateTime=> " & result)
  TimeWrittenToDateTime = result
end Function

function EventDate(DT) 
 On Error Resume Next     
  dim result
  result=replace(DT, "/", "") 
  result=replace(result, "-", "") 
  result=replace(result, ".", "") 
  result=replace(result, ":", "") 
  result=replace(result, " ", "") 
  result=result & ".000000-000"
  EventDate = result
end function

function WriteSystemEventToSQL(Message)
  On Error Resume Next     
      Randomize							' включаем генератор случайных чисел
      debug("WriteSystemEventToSQL->" & Message)
      with apcEvent
       .EventCode = "-1"
       .Date = LDateTime(Now()) 
       .Message = Message
       .Ip=Ip
       .sId = MakeSID(Ip & .Date & int((Rnd * 6)+Rnd)) 
     end with
      WriteEventToSQL(apcEvent)
end function

function check_point_reg(terminal_id, TerminalType, ip, Bias, model)
  On Error Resume Next     
   dim Recordset
   dim Result
	  if sql_open()=0 Then
 	       Result=false
	       debug("Проверяем есть ли зарегистрированный поинт с IP " & Ip)
	       debug("exec get_point_setting '" & Ip & "'")
	       set Recordset=objConnect.Execute("exec get_point_setting '" & Ip & "'")
		 If objConnect.Errors.Count >0 Then
  			debug("SQL_Error=> " & SQL_Error(objConnect))
		 end If 	
		  log("SQL=>" & Recordset.Fields(1).Value)	
		  log("SQL=>" & ip)	
	         if(trim(Recordset.Fields(1).Value)<>trim(ip)) Then  ' ----------- регистрируем поинт если его нет в базе ----------
	  	        log("Узел с IP= " & Ip & " не обнаружен в системе" )
			call executeSQL("exec add_energo_point '" & terminal_id & "','" & TerminalType & "','" & Ip & "'")
			    If objConnect.Errors.Count > 0 Then
  				debug("SQL_Error=> " & SQL_Error(objConnect) )
		 	    else 
		 	        debug("зарегистрировали поинт с IP= " & Ip & " в базе" )
		  	  	Result=true
			    end If
		   else
		          terminal_id   = Recordset.Fields(0).Value		  ' обновляем данные о наименовании терминала
			  Timer         = CLng(Recordset.Fields(2).Value)         ' обновляем данные о периоде обновления с сервера статистики
		          LogWrite      = CLng(Recordset.Fields(3).Value)     	  ' обновляем данные о необходимости записи в Log-файл с сервера статистики
		          command       = Recordset.Fields(4).Value            	  ' получаем управляющую комманду
		          commandDate   = Recordset.Fields(5).Value         
											  ' это необходимо для снижения количества записей в базу
										  	  ' уменьшения нагрузки, но если Vout=0 - пишем в базу обязательно
		           TerminalType= Recordset.Fields(6).Value	 	      	  ' обновляем данные о типе терминала
		           blocked=Recordset.Fields(7).Value       	 		  ' обновляем данные о типе терминала
			   last_update_dat=Recordset.Fields(8).Value
			   last_update_event=Recordset.Fields(9).Value
		           TimerCountMax   = Recordset.Fields(10).Value         
		          
                           apcDevice.MinutesInterval  = Recordset.Fields(11).Value         
                           apcDevice.SecondsInterval  = Recordset.Fields(12).Value         
                           apcDevice.AudibleAlarm     = Recordset.Fields(13).Value         
                           apcDevice.LastBatteryReplacementMonth  = Recordset.Fields(14).Value         
                           apcDevice.LastBatteryReplacementYear   = Recordset.Fields(15).Value         
                           apcDevice.ConnectionType   = Recordset.Fields(16).Value         
	                   apcDevice.pbe_login        = Recordset.Fields(17).Value         
	                   apcDevice.pbe_password     = Recordset.Fields(18).Value         

	 		   debug("apcDevice.MinutesInterval=" & apcDevice.MinutesInterval)
			   debug("apcDevice.SecondsInterval=" & apcDevice.SecondsInterval) 	
			   debug("apcDevice.ConnectionType=" & apcDevice.ConnectionType)
			   debug("apcDevice.LastBatteryReplacementMonth=" & apcDevice.LastBatteryReplacementMonth)	
			   debug("apcDevice.LastBatteryReplacementYear=" & apcDevice.LastBatteryReplacementYear)	
		           debug("apcDevice.AudibleAlarm=" & apcDevice.AudibleAlarm)
		           debug("apcDevice.ConnectionType =" &  apcDevice.ConnectionType)
		           debug("apcDevice.pbe_login      =" &  apcDevice.pbe_login)
		           debug("apcDevice.pbe_password   =" &  apcDevice.pbe_password)


		 	   debug("есть зарегистрированный поинт " & terminal_id & " с IP= " & Ip & " в базе" )
			   log("IP =>" & Ip)
			   log("Разрядность ОС =>" & typeOS)
			   log("ScriptDir=>" & ScriptDir) 
			   log("PathToData=>" & PathToData) 
	 		   log("UPSType=>" & UPSType) 
	 		   log("last_update_dat=>" & last_update_dat) 
	 		   log("last_update_event=>" & last_update_event ) 
   			Result=true
        	  end if 
              sql_close()
       	  end if 
    set Recordset=Nothing
   check_point_reg=Result
end  function

function get_model_Name(UPSType)
  On Error Resume Next     
    ModelName="UNKNOW"
    Select Case UPSType
       Case "ippon"
		modelName="IPPON"	
       Case "apc"
		modelName=get_apc_model_name(PathToData & "\energylog\" & LNumber(year(date()))  & "-" &  LNumber(month(date())) & ".log")

       Case "apcupsd"
		modelName=get_apcupsd_model_name(PathToData &"\apcupsd.status", PathToData &"\Datalog") 
    End Select
	log("get_model_Name=" & modelName)
	get_model_Name=modelName
end function

sub update_point_setting()
    On Error Resume Next     
      debug("Обновление данных узла ")
      if sql_open()=0 Then 
         sql="exec update_apc_point3 '" & Bias & "','" & UPSType & "','" & Ip &_
		 "','" & version & "','" & ModelName &_
		 "','" & last_update_dat & "','" & last_update_event & "'"
         executeSQL(sql)
	 sql_close()
      end if 	
end  sub


function WriteEventToSQL(apcEvent)
  On Error Resume Next 
  Dim Sql
  if(sql_open=0) Then	
      with apcEvent
       Sql="exec add_energo_event '" & .Date & "','" &   terminal_id & "','" &  TerminalType & "','" & .EventCode & "','" & trim(.Message) & "','" & .Ip & "','" & .sId & "'"
      end with
     executeSQL(sql)
   sql_close()
 end If
end function

function WriteLogToSQL(apcData)
   On Error Resume Next     
   with apcData
	 Sql="exec add_energo_datalog '" & .Date & " " & .Time & "'," &_
	  "'" & terminal_id & "'," &_
	  "'" & TerminalType & "'," &_
	  "'" & .MinimumLineVoltage & "'," &_
	  "'" & .MaximumLineVoltage & "'," &_
	  "'" & .LineVoltage & "'," &_
	  "'" & .BatteryVoltage & "'," &_
	  "'" & .OutputFrequency & "'," &_
	  "'" & .UPSLoad & "'," &_
	  "'" & .UPSInternalTemperature & "'," &_
	  "'" & .Ip & "'," &_
	  "'" & .sId & "'"
 	if( sql_open()=0) Then
	   	executeSQL(sql)
		sql_close()
	end if
   end with

end function

' -================== Передача данных о событиях ==================-

sub load_event_file(UPSType) 
    On Error Resume Next 
    dim FileName
    debug(" Start event loading ")   '----- выбираем лог-файл для парсинга в зависимости от типа ИБП --------
    Select Case Trim(UPSType)
       Case "ippon"
		call ippon_event_parsing(last_update_event)
       Case "apc"
		call pbe_apcParseEvent(last_update_event)
       Case "apcupsd"
       Case Else 
    End Select
end sub

'-===============================  парсим лог IPPON ИБП =========================-

function ippon_event_parsing(LastUpdate) 
On Error Resume Next 
     debug( "ippon_event_parsing stared ")
     FileName=PathToData & "\UPSEVENT.CSV"
     Set ts = fso.OpenTextFile(FileName  , 1)
     If Err.Number=0 Then
     Err.Clear	
     debug( "FileName=>  " & FileName)
	     Do until ts.AtEndOfStream
	      with apcEvent
		        'замена символов
		           s = ts.ReadLine() 'построчное чтение файла
			   DateSplit = split( Mid(s, 5, 10), "/") 'разбираем дату
		          .EventCode = Mid(s, 1,2)
	        	  .Date =DateSplit(2) & "." & DateSplit(0) & "." &  DateSplit(1) & " " & Mid(s, 17, 8)
		          .Message = Mid(s, 27)
		          .Ip=Ip
		          .sId = MakeSID(Ip & .Date) 
	       End With
 	      Loop                           
         ts.Close
      else 
    WriteSystemEventToSQL("Ошибка открытия файла => " & FileName & "  " & Err.Description)
  end if
  set ts=Nothing
end function


 
function ippon_log_parsing(LastUpdate, s) 
     On Error Resume Next 
  	      s = replace( s, ",",   chr(9))   ' замена символов
  	      s = replace( s, "/",   ".")   ' замена символов
	      mass = split( s, chr(9)) 'разбираем файл	
	      DateSplit = split( mass(0), ".") 'разбираем дату
       with apcData
	       LYear=DateSplit(2)  
	       LMonth=DateSplit(0)
	       LDay=DateSplit(1)	
	      .Date = LYear & "-" & LMonth & "-" & LDay
	      .Time = mass(1)
	      .MaximumLineVoltage = mass(5)
	      .MinimumLineVoltage = mass(5)
	      .LineVoltage =        mass(5)
	      .OutputVoltage =      mass(5)
	      .BatteryVoltage =     mass(11)
	      .OutputFrequency=     -1
	      .UPSLoad        =     -1
	      .UPSInternalTemperature= mass(14)
	      .ProbeTemperature1     = -1 
	      .ProbeHumidity1        = -1
	      .ProbeTemperature2     = -1
	      .ProbeHumidity2        = -1
	      .Ip=Ip
              .sId = MakeSID(Ip & .Date & " " & .Time)
        End With
end function

'-=============================== парсим лог APC ИБП =========================-

sub pbe_apcParseEvent(LastUpdate) 
 dim WshShell
 dim objWMIService
 dim colLoggedEvents
 dim sId
On Error Resume Next 
	 Set WshShell=CreateObject("Wscript.Shell")
	 Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\.\root\cimv2")
	 SQL="SELECT * FROM Win32_NTLogEvent WHERE Logfile >= 'Application' and SourceName='APCPBEAgent' " &_
	 " and TimeWritten > '" & EventDate(last_update_event) & "'"
	 Set colLoggedEvents = objWMIService.ExecQuery(SQL)
	 debug(SQL)
	 debug("colLoggedEvents.Count=> " & colLoggedEvents.Count)

       IF colLoggedEvents.Count > 0 Then
        with apcEvent
	 For Each objEvent in colLoggedEvents
	debug(objEvent.TimeGenerated)
	    .Date =TimeWrittenToDateTime(objEvent.TimeWritten) 
	    .EventCode=objEvent.EventCode
	    .Message=objEvent.Message
	    .Ip=Ip
            .sId = MakeSID(Ip & mid(objEvent.TimeWritten,1,14)) 
  	           If .EventCode<>"" Then
	    	       last_update_event=TimeWrittenToDateTime(objEvent.TimeWritten) 
		       WriteEventToSQL(apcEvent)
		       update_point_setting()  ' обновляем данные		
	           End If	
	  Next
	 End With
      else 
           Log("Нет данных о событиях с признаком APCPBEAgent в данный период ")
	End IF 
    set WshShell = Nothing
   set objWMIService = Nothing
 set colLoggedEvents= Nothing
end sub


function apc_log_parsing(s) 
     On Error Resume Next 
	    ' debug("apc_log_parsing ->" & s)
  	      s = replace( s, " ",   chr(9))   ' замена символов
	      s = replace( s, ",",   ".")   
  	      s = replace( s, "/",   ".")   ' замена символов
  	      s = replace( s, "N.A", "-1")   ' замена символов
	      mass = split( s, chr(9)) 'разбираем файл	
	      DateSplit = split( mass(0), ".") 'разбираем дату
       with apcData
	      .Date = DateSplit(2) & "-" & DateSplit(0) & "-" & DateSplit(1)
	      .Time = mass(1)
	      .MaximumLineVoltage = mass(2)
	      .MinimumLineVoltage = mass(3)
	      .LineVoltage =        mass(4)
	      .OutputVoltage =     mass(5)
	      .BatteryVoltage =     mass(6)
	      .OutputFrequency=     mass(7)
	      .UPSLoad        =     mass(8)
	      .UPSInternalTemperature= mass(9)
	      .ProbeTemperature1     = mass(10) 
	      .ProbeHumidity1        = mass(11)
	      .ProbeTemperature2     = mass(12)
	      .ProbeHumidity2        = mass(13)
	      .Ip=Ip
              .sId = MakeSID(Ip & .Date & " " & .Time)
 	 End With
end function
'-==================================================================================-

function get_apcupsd_model_name(FileName, OutFile) 
    On Error Resume Next     
    debug("get_apcupsd_model_name-> " & FileName & "," & OutFile)
    Set ts = fso.OpenTextFile(FileName  , 1)
     If Err.Number<>0 Then
         WriteSystemEventToSQL("Ошибка открытия файла => " & FileName & "  " & Err.Description)
	  else
       Set ds = fso.OpenTextFile(OutFile  , 2, True)
       With ts 
        Do until .AtEndOfStream
          s = .ReadLine() '--- построчное чтение файла
		      s = replace(s, "Volts","") 	' удаляем слова-паразиты
		      s = replace(s, "C Internal","") 	' удаляем слова-паразиты
		      s = replace(s, "Percent","") 	' удаляем слова-паразиты
		      s = replace(s, "Hz","") 		' удаляем слова-паразиты
		      s = replace(s, "Seconds","") 	' удаляем слова-паразиты
		      s = replace(s, "Minutes","") 	' удаляем слова-паразиты
		      s = replace(s, "Load Capacity","") 	' удаляем слова-паразиты
                      s = trim(s) 			' удаляем лишние пробелы
			debug(s) 

		      mass = split( s, ": ") 		'	разбираем файл	
		  if(ubound(mass) >=1) Then 
                      p = trim(mass(0)) 		' параметр
                      d = trim(mass(1)) 		' данные 
		      Select Case p
			 Case "LINEV" 
			           linev=d		
			 Case "OUTPUTV" 
			           outputv=d		
			 Case "BATTV"
 			 	   battv=d
			 Case "LINEFREQ"
				   linefreq=d
			 Case "MODEL"
				   modelName=d
			 Case "DATE"
				   d=replace(d," ",":")	
				   d=replace(d,"-",":")	
				   date_mass=split( d, ":")
			           date_apc=date_mass(1) & "/" &  date_mass(2) & "/" & date_mass(0) & " " & date_mass(3) & ":" & date_mass(4) & ":" & date_mass(5)
			 Case "MODEL"
				   model=d	
			 Case "ITEMP"
				 itemp=d
			 Case "LOADPCT"
				 loadpct=d
	              End Select	 
		End If
 	 Loop                           
      .Close
      End With
         ds.Writeline(date_apc & chr(9) & "N/A" & chr(9) & "N/A" & chr(9) & linev & chr(9) & outputv & chr(9) & battv & chr(9) & linefreq & chr(9) & loadpct & chr(9) & itemp & chr(9) & "N/A" & chr(9) & "N/A" & chr(9) & "N/A" & chr(9) & "N/A" )		
         ds.Close
      end if 
    set ts =Nothing 
    set ds =Nothing 
    debug("Model Name-> " & modelName)
    get_apcupsd_model_name=modelName
end  function


function get_apc_model_name(FileName) 
    On Error Resume Next     
    log("get_apc_model_name " & FileName)
    modelName="UNKNOW"
    Set ts = fso.OpenTextFile(FileName  , 1)
    If Err.Number<>0 Then
      WriteSystemEventToSQL("Ошибка открытия файла => " & FileName & "  " & Err.Description)
  else
       With ts 
        Do until .AtEndOfStream
          s = .ReadLine() '--- построчное чтение файла
	      mass = split( s, "=") 		'	разбираем файл	
	     if(ubound(mass) >= 1) Then 
              p = trim(mass(0)) 		' параметр
              d = trim(mass(1)) 		' данные 
		      Select Case p
			 Case "# $modelname" 
                              modelName=d
				Exit Do
	              End Select
	    End If		 
 	 Loop                           
      .Close
      End With
   End If
    set ts =Nothing 
    debug("Model Name-> " & modelName)
    get_apc_model_name=modelName
end  function

function getLogFileName(UPSType)
On Error Resume Next 
    Select Case UPSType
       Case "ippon"
		getLogFileName=PathToData & "\UPSDATA.CSV"
       Case "apc"
		getLogFileName=PathToData & "\DataLog"
       Case "apcupsd"
		getLogFileName=PathToData & "\DataLog"
    End Select
end  function

' Считываем dat-файл
sub load_log_file(UPSType)
    On Error Resume Next 
    dim FileName
    dim ts 
    debug("  ************* Data loading  ************** ")
'----- выбираем лог-файл для парсинга в зависимости от типа ИБП --------
    Err.Clear     
    FileName=getLogFileName(UPSType)
    log(FileName)
    Set ts = fso.OpenTextFile(FileName,  1)
    If Err.Number=0 Then
       With ts 
	if(UPSType<>"apcupsd") Then   .ReadLine() ' пропускаем первую строку
        Do until .AtEndOfStream
	'замена символов
          s = .ReadLine() 'построчное чтение файла
  	      If (s<>"") Then 
		      Select Case UPSType
			 Case "ippon" 
			           call ippon_log_parsing(s)			
			 Case "apc" 
	 		           call apc_log_parsing(s)
			 Case "apcupsd" 
	 		           call apc_log_parsing(s)
	              End Select	 
               End If 
 	   Loop                           
      .Close
      End With
      debug(TimerCount & "\" & TimerCountMax)
      if (TimerCount = TimerCountMax or apcData.LineVoltage = "0.0") Then
	    last_update_dat=apcData.Date  & " " & apcData.Time
	    WriteLogToSQL(apcData)
 	    update_point_setting()  ' обновляем данные		
   end if		

  else 
      debug("Err.Number ->" & Err.Number)
      WriteSystemEventToSQL("Ошибка открытия файла => " & FileName & "  " & Err.Description)
    End If
  set ts =Nothing
End Sub    


function SQL_Error(objConnect)
  On Error Resume Next     
    SQL_Error= ""
    if objConnect.Errors.Count > 0 Then 
	    for i = 0 to objConnect.Errors.Count - 1
	     SQL_Error= SQL_Error & " " & objConnect.Errors(i).Source & " Error " & objConnect.Errors(i).Number & ": " _ 
                	& vbTab & objConnect.Errors(i).Description & " " _ 
        	        & vbTab & "(SQL state = " & objConnect.Errors(i).SqlState & ")"
	      next 
	else 
      SQL_Error="Нет ошибок при обращении к базе данных."	
   end If	
end function



' возвращаем тип ИБП, в зависимости от активности сервиса
function get_ups_type() 
 On Error Resume Next     
 dim objShell
  set objShell=CreateObject("Shell.Application")
  Set objFSO = CreateObject("Scripting.FileSystemObject")
' предохраняемся от перезаполения  log-файлов

  UPSType="unknow"
  If(objShell.IsServiceRunning("UPSmonitor")) Then      ' ---------------- Проверка на модель Ippon ------------------
       UPSType="ippon"
	if typeOS=64  and objFSO.FileExists(Path_To_Ippon_x64 & "\UPSDATA.CSV") Then 	
		PathToData=Path_To_Ippon_x64
	else
		PathToData=Path_To_Ippon_x32
	end if 
  End If

  If(objShell.IsServiceRunning("APCPBEAgent")) Then     ' -----------  проверка на APC PBE Agent  ------------------
       UPSType="apc"
	if typeOS=64 and objFSO.FileExists(Path_To_APC_x64 & "\Datalog") Then 	
		PathToData=Path_To_APC_x64
	else
		PathToData=Path_To_APC_x32
	end if 
  End If

  If(objShell.IsServiceRunning("Apcupsd")) Then 	'------------ Проверка Apcupsd ---------------------------=
       UPSType="apcupsd"
	if typeOS=64 and objFSO.FileExists(Path_To_apcupsd_x64 & "\apcupsd.status") Then 	
		PathToData=Path_To_apcupsd_x64
	else
		PathToData=Path_To_apcupsd_x32
	end if 
  End If
  debug("Служба дя ИБП - " & UPSType)	
  debug("PathToData - " &   PathToData)
  set objShell= Nothing
  set objFSO= Nothing
  get_ups_type = UPSType
end function

function getBias()
 On Error Resume Next     
 dim objWMIService
 dim colItems
 Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\.\root\cimv2")
 Set colItems = objWMIService.ExecQuery("Select * from Win32_TimeZone")
	 For Each objItem in colItems
		Bias=objItem.Bias
	 Next
	 debug("Bias=> " & Bias)	
  set  objWMIService=Nothing
  set  colItems=Nothing
 getBias=Bias
end function

function ping(strHost)
  On Error Resume Next     
   dim objWMIService
    dim colPings
	strComputer = "."
	Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
	Set colPings = objWMIService.ExecQuery ("Select * From Win32_PingStatus where Address = '" & strHost & "'")
	For Each objStatus in colPings
	  If IsNull(objStatus.StatusCode) or objStatus.StatusCode<>0 Then
		ping=0
	  Else
		ping=1
	  End If
	Next
	set  objWMIService=Nothing
    set  colPings=Nothing
end function


function ConnectToSQL(connectStr)
 On Error Resume Next     
     objConnect.ConnectionTimeout=15
     objConnect.CommandTimeout=30
     objConnect.Open connectStr, adOpenStatic, adLockOptimistic
     debug("(SQL) connect initialization.... " )
     ConnectToSQL=objConnect.Errors.Count
end function


function sql_open()
  On Error Resume Next     
   If (ping(sql_server1)=1) Then 
          log("connected to " & sql_server1)
  	    sql_open=ConnectToSQL("Provider=SQLOLEDB;Data Source=" & sql_server1 & ";" & "Initial Catalog=" & base & ";" & "User ID=" & user & ";Password=" & password & ";"		)
	    else 
          log("connected to " & sql_server2)
	sql_open=ConnectToSQL("Provider=SQLOLEDB;Data Source=" & sql_server2 & ";" & "Initial Catalog=" & base & ";" & "User ID=" & user & ";Password=" & password & ";"			)
     End If
end function

function sql_close()
  On Error Resume Next     
    debug("Завершение подключения к серверу...")                   
    objConnect.Close	
end function

sub executeSQL(sql)
  On Error Resume Next     
     dim Recordset
     debug("(SQL) " & sql)
     set Recordset=objConnect.Execute(sql)
      if (objConnect.Errors.Count > 0) then 
   	     debug(SQL_Error(objConnect))
      end If
end sub


Function GetOsArchitecture()
   On Error Resume Next
    GetOsArchitecture="32"
    Const wbemFlagReturnImmediately = &h10
    Const wbemFlagForwardOnly = &h20
    Set objWMIService = GetObject("winmgmts:\\.\root\CIMV2")
       Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem")
    For Each objItem In colItems
        GetOsArchitecture=Left(objItem.OSArchitecture,2)
    Next
    Set objWMIService = Nothing
    Set colItems = Nothing
End Function

sub  ClearCommandStatus(Ip) '--- сброс флага выполнения команды
    On Error Resume Next     
      if sql_open()=0 then 
	     executeSQL("exec clear_command_status '" & Ip &"'")
	     sql_close()
      end if 	
end  sub

sub RebootComputer()
On Error Resume Next     
 Dim objClass	 ' Объект SWbemObject (класс WMI) 
 Dim colInstances ' Коллекция экземпляров класса WMI 
 Dim objInstance  ' Элемент коллекции 
 dim Recordset
    log("  *************  Перезагрузка узла **************" )
    ClearCommandStatus(Ip)
    debug("Перезагрузка узла...")
    if (objConnect.Errors.Count > 0) then 
	WriteSystemEventToSQL("Ошибка при выполнении перезагрузки узла. ")
      else 
	WriteSystemEventToSQL("Выполнена перезагрузка узла ")
		WScript.Sleep 300000 ' Ждем действия 5 минут
		Set objClass = GetObject("WinMgmts:{(Shutdown,RemoteShutdown)}!\\" &_ 
		".\Root\CIMV2:Win32_OperatingSystem") 
		Set colInstances = objClass.Instances_ 
		For Each objInstance In colInstances 	' Перебираем элементы коллекции 
		  objInstance.Reboot() 			' Для каждого экземпляра вызываем метод Reboot 
		Next 
     end if 
    set Recordset=Nothing
end sub

Function ReadBinaryFile(filename)
   On Error Resume Next   
    Dim bArr
    log("ReadBinaryFile=>" &  filename)
    Err.Clear
    With CreateObject("ADODB.Stream")
        .Type = 1 'adTypeBinary
        .Open
        .LoadFromFile filename
        bArr = .Read
        .Close
    End With
	WriteSystemEventToSQL("Upload File Size=> " & uBound(bArr))
        ReadBinaryFile = bArr
End Function

sub SendLogFile(command)
   On Error Resume Next     
    if command<> 0 Then 
      Err.Clear
      ClearCommandStatus(Ip) 'сброс флага
      log("  *************  Отправка упаковка лог-файлов в временный архив! **************" )
      strcmd=""

      commandYear=LNumber(Year(commandDate))   ' запрошенная дата - год
      commandMonth=LNumber(Month(commandDate)) ' запрошенная дата - месяц
      commandDay=LNumber(Day(commandDate))     ' запрошенная дата - день

      Set objShell = CreateObject("Wscript.Shell")
      Set objFSO = CreateObject("Scripting.FileSystemObject")
     
     If not objFSO.FileExists(ScriptDir & "\zip.exe") Then
	WriteSystemEventToSQL("Не найден " &  ScriptDir & "\zip.exe" )
     End If 	      

      select case command
	case 254	
	    	ZipLogsName="agent_log_" & FDateTime(Now()) & ".zip"
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " &_  
		      chr(34) & ScriptDir & "\" & commandYear & "." & commandMonth & "." & commandDay & ".log" & chr(34) 
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if
		
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " &_  
		      chr(34) & ScriptDir & "\spmagent.log" & chr(34) 
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		
	case 253 
' NCR:
' 1. C:\xxxxxxxx.ERL
' 2. C:\xxxxxxxx.HWR
' 3. C:\scs\atm_h\PRJ\xxxxxxxx.PRJ
' 4. C:\scs\atm_h\MassPay_Log\xxxxxxxx.pps
' 5. C:\scs\atm_h\MassPay_Log\xxxxxxxx.tran
'xxxxxxx - дата за которую собран лог в формате ГГГГММДД

	    	ZipLogsName="ncr_log_" & FDateTime(Now()) & ".zip"

		PathToLogs=chr(34) & "C:\" & commandYear & commandMonth & commandDay & ".ERL" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if
	
		PathToLogs=chr(34) & "C:\" & commandYear & commandMonth & commandDay & ".HWD" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		PathToLogs=chr(34) & "C:\scs\atm_h\PRJ\" & commandYear & commandMonth & commandDay & ".PRJ" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		PathToLogs=chr(34) & "C:\scs\atm_h\PRJ\" & commandYear &  commandMonth & commandDay & ".pps" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		PathToLogs=chr(34) & "C:\scs\atm_h\PRJ\" & commandYear &  commandMonth & commandDay & ".tran" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

 case  252
' Wincor Nixdorf
' 2. C:\PROPXD\Log (всю папку)
	    	ZipLogsName="wincor_log_" & FDateTime(Now()) & ".zip"

		PathToLogs=chr(34) & "C:\PROPXD\Log\*.*" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

 case 251
' Nautilus Hyosung:
' 1. C:\xxxxxxxx.ERL
' 2. C:\scs\atm_h\PRJ\xxxxxxxx.PRJ
' 3. C:\Program Files\Nextware\Trace\NHYYY4YYY_XXXXXX.txt
' 4. C:\scs\atm_h\MassPay_Log\xxxxxxxx.pps
' 5. C:\scs\atm_h\MassPay_Log\xxxxxxxx.tran
' xxxxxxx - дата за которую собран лог в формате ГГГГММДД
' YYYYYY - название устройства, по которому собран лог (CDU - диспенсер, SPR - чековый принтер, JPR - журнальный принтер, MCU - картридер, EPP - клавиатура, PNC - спец. электроника, BNA - модуль приема наличных)
	    	ZipLogsName="Nautilus_log_" & FDateTime(Now()) & ".zip"

		PathToLogs=chr(34) & "C:\" & commandYear & commandMonth & commandDay & ".ERL" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		PathToLogs=chr(34) & "C:\scs\atm_h\PRJ\" & commandYear & commandMonth & commandDay & ".PRJ" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		PathToLogs=chr(34) & "C:\Program Files\Nextware\Trace\NH*_" & commandYear & commandMonth & commandDay & ".txt" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

		PathToLogs=chr(34) & "C:\scs\atm_h\MassPay_Log\" & commandYear & commandMonth & commandDay & ".pps" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if
		
		PathToLogs=chr(34) & "C:\scs\atm_h\MassPay_Log\" & commandYear & commandMonth & commandDay & ".tran" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

   case 250
' ITT, Dors, Diebold IX
' 1. C:\xxxxxxxx.ERL
' 2. C:\scs\atm_h\PRJ\xxxxxxxx.PRJ
' xxxxxxx - дата за которую собран лог в формате ГГГГММДД
                 
  	    	ZipLogsName="itt-dors-diebold_log_" & FDateTime(Now()) & ".zip"

		PathToLogs=chr(34) & "C:\" & commandYear & commandMonth & commandDay & ".ERL" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if
		
		PathToLogs=chr(34) & "C:\scs\atm_h\PRJ\" & commandYear & commandMonth & commandDay & ".PRJ" & chr(34) 
		strcmd = chr(34) & ScriptDir & "\zip.exe" & chr(34) & " " & chr(34) & ScriptDir & "\" & ZipLogsName & chr(34) & " " & PathToLogs  
	        debug("Запуск архиватора  => " & strcmd)
		objShell.Run strcmd, 0, True ' запуск архиватора в тихом режиме и ожидание завершения 
		if Err.Number > 0 Then
		      debug("Err.Description ->" & Err.Description)
		      WriteSystemEventToSQL("Err.Description ->" & Err.Description)
		      Err.Clear	
		end if

       end select	

        debug(" " &  Err.Description)

  log("  *************  Отправка временного архива лог-файлов **************" )
     If not objFSO.FileExists(ZipLogsName) Then
		WriteSystemEventToSQL("Не найден " &  ZipLogsName )
		ZipLogsName=""
     End If 	      


    if Trim(ZipLogsName)<>"" Then 
	WriteSystemEventToSQL("Upload File => " & ZipLogsName)
        debug("ZipLogsName => " & ScriptDir & "\" & ZipLogsName)
        LogFileBinaryData = ReadBinaryFile(ScriptDir & "\" &  ZipLogsName)
	Err.Clear
	if sql_open()=0 Then
	        debug("SQL=> upload " &  ScriptDir & "\" & ZipLogsName)
		Set Recordset = CreateObject("ADODB.Recordset")
		Recordset.CursorType = 2
		Recordset.LockType = 3
		Recordset.Open "select * from upload_files", objConnect

		Recordset.AddNew
		Recordset.Fields("ip").Value =  Ip
		Recordset.Fields("terminal_id").Value = terminal_id
		Recordset.Fields("fileData").Value = LogFileBinaryData

		Recordset.Fields("size").Value = ubound(LogFileBinaryData)+1

		Recordset.Fields("logType").Value = 1		 ' 1  - лог агента
		Recordset.Fields("date").Value = Now()		 ' 1  - лог агента
	
		Recordset.Fields("fileName").Value =  ZipLogsName
		Recordset.Update	
		Recordset.Close	
	        WriteSystemEventToSQL("Upload File Size => " & ubound(LogFileBinaryData)+1)
              	WriteSystemEventToSQL(SQL_Error(objConnect))
	        set Recordset=Nothing
		sql_close()
	else 
	       log("SQL=> нет подключения для переадчи файла..")
	end if	

        log("  *************  удаление временного архива  **************" )
        objFSO.DeleteFile(ScriptDir & "\" & ZipLogsName)
     end if	
  end if	
end sub



function getAPCSettings(host, login, password)
 On Error Resume Next 
 Err.Clear
	Dim oXMLHTTP
	Dim oStream
	Dim LogSetting

	Set oXMLHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
	oXMLHTTP.Open "POST", "https://" & host & ":6547/j_security_check", 0
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	
	oXMLHTTP.Option(6)=False 
	oXMLHTTP.Option(4)=13056
	oXMLHTTP.Send("j_username="&login&"&j_password="&password)
	Cookie=oXMLHTTP.getResponseHeader("Set-Cookie")

' получаем данные
	oXMLHTTP.Open "GET", "https://" & host & ":6547/main", False 
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	oXMLHTTP.SetRequestHeader "Cookie",Cookie
	oXMLHTTP.Send R
		
	If ( InStr(1,oXMLHTTP.responseText,"MenuServlet") > 0 ) Then
		WScript.Echo "Authorization  - OK "
		 oXMLHTTP.Open "GET", "https://" & host & ":6547/datalogconfigure", False 
		 oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		 oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		 oXMLHTTP.SetRequestHeader "Cookie",Cookie
		 oXMLHTTP.Send 

		 RecordingIntervalSecond=Replace(Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old.second.RecordingInterval")+37, 3),chr(34),"")
		 RecordingIntervalSecond=Replace(RecordingIntervalSecond,">","")
		 RecordingIntervalSecond=Replace(RecordingIntervalSecond,chr(10),"")
	 	 RecordingIntervalSecond=Replace(RecordingIntervalSecond,chr(13),"")
		 RecordingIntervalMinute=Replace(Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old.minute.RecordingInterval")+37, 3),chr(34),"")
	 	 RecordingIntervalMinute=Replace(RecordingIntervalMinute,">","")
		 RecordingIntervalMinute=Replace(RecordingIntervalMinute,chr(10),"")
		 RecordingIntervalMinute=Replace(RecordingIntervalMinute,chr(13),"")
	
		 oXMLHTTP.Open "GET", "https://" & Host & ":6547/pssystemsettings", False '
		 oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		 oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		 oXMLHTTP.SetRequestHeader "Cookie",Cookie
		 oXMLHTTP.Send R
	
	 	 ConnectionType="UNKNOW" 
		 OutputVoltage="UNKNOW" 	
		 HighTransferVoltage="UNKNOW" 	
		 LowTransferVoltage="UNKNOW" 	
		 PowerQualitySensitivity="UNKNOW" 
		 LastBatteryReplacementMonth="UNKNOW" 
		 LastBatteryReplacementYear="UNKNOW" 
		 AudibleAlarm="UNKNOW" 

	        if InStr(1,oXMLHTTP.responseText,"old.USB") > 0 Then 
			ConnectionType="USB"
	  	else 
			ConnectionType=Replace(Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old..3.1.2.3.2")+23,7),chr(34),"")
			ConnectionType=Replace(ConnectionType,">","")
			ConnectionType=Replace(ConnectionType,chr(10),"")
			ConnectionType=Replace(ConnectionType,chr(13),"")
		end if
	
		oXMLHTTP.Open "GET", "https://" & Host & ":6547/configure", False '
		oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		oXMLHTTP.SetRequestHeader "Cookie",Cookie
		oXMLHTTP.Send R

	        Dim MonthName
		  MonthName=Array("January","February","March","April","May","June","July","August","September","October","November","December")
		 for i=0 to ubound(MonthName) 
		     if InStr(1,oXMLHTTP.responseText,"selected value=" & chr(34) & i & chr(34),vbTextCompare) > 0 Then
			LastBatteryReplacementMonth=i
			exit for
		     end if
		  next
	  
		OutputVoltage=Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old..3.1.9.2")+21, 3)	
		LowTransferVoltage=Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old..3.1.9.4")+21, 3)	
		PowerQualitySensitivity=Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old..3.1.9.7")+21, 3)
		
		HighTransferVoltage=Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old..3.1.9.3")+21, 3)
	 	LastBatteryReplacementYear=Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old.year..3.1.8.3")+26, 4)
	 	AudibleAlarm=Mid(oXMLHTTP.responseText, InStr(1,oXMLHTTP.responseText,"old..3.1.9.5")+21, 1)
		
		apcDevice.terminal_id = terminal_id
		apcDevice.ip = Ip
		apcDevice.MinutesInterval = RecordingIntervalMinute 	
		apcDevice.SecondsInterval = RecordingIntervalSecond 
	        apcDevice.AudibleAlarm    = AudibleAlarm
		apcDevice.LastBatteryReplacementMonth   =  LastBatteryReplacementMonth	
		apcDevice.LastBatteryReplacementYear    =  LastBatteryReplacementYear	
		apcDevice.ConnectionType =  ConnectionType

		debug("apcDevice.MinutesInterval=" & apcDevice.MinutesInterval)
		debug("apcDevice.SecondsInterval=" & apcDevice.SecondsInterval) 	
		debug("apcDevice.ConnectionType=" & apcDevice.ConnectionType)
		debug("apcDevice.LastBatteryReplacementMonth=" & apcDevice.LastBatteryReplacementMonth)	
		debug("apcDevice.LastBatteryReplacementYear=" & apcDevice.LastBatteryReplacementYear)	
	        debug("apcDevice.AudibleAlarm=" & apcDevice.AudibleAlarm)

		debug("OutputVoltage=" & OutputVoltage)
		debug("HighTransferVoltage=" & HighTransferVoltage)
		debug("LowTransferVoltage=" & LowTransferVoltage)
	

  	  else 
		WScript.Echo "Error authorization. Bad login or password."
	End If
   Set oXMLHTTP= Nothing
   WScript.Echo "setAPCSetting cancel."
   debug(Err.Description)
   WScript.Echo "----------------------------------------------------------------------------"
end function 

function setAPCNewMinutesInterval(host, login, password, NewMinutesInterval) 
 On Error Resume Next 
 Err.Clear
	Dim oXMLHTTP
	Dim oStream
	Dim LogSetting

	Set oXMLHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
	oXMLHTTP.Open "POST", "https://" & host & ":6547/j_security_check", 0
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	
	oXMLHTTP.Option(6)=False 
	oXMLHTTP.Option(4)=13056
	oXMLHTTP.Send("j_username="&login&"&j_password="&password)
	Cookie=oXMLHTTP.getResponseHeader("Set-Cookie")
 
	oXMLHTTP.Open "GET", "https://" & host & ":6547/main", False 
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	oXMLHTTP.SetRequestHeader "Cookie",Cookie
	oXMLHTTP.Send R
	OldMinutesInterval="0"	
	If ( InStr(1,oXMLHTTP.responseText,"MenuServlet") > 0 ) Then
		WScript.Echo "Authorization  - OK "
		R="new.EnableDataLogging=true&old.EnableDataLogging=true&new.DataLogExpiration=604800&old.DataLogExpiration=604800&new.minute.RecordingInterval=" & NewMinutesInterval &"&new.second.RecordingInterval=0&old.minute.RecordingInterval=" & OldMinutesInterval &"&old.second.RecordingInterval=0&DataLogDisplayColumn.1=.3.1.4.3&DataLogDisplayColumn.2=.3.1.4.4&DataLogDisplayColumn.3=.3.1.4.2&DataLogDisplayColumn.4=.3.1.5.3&DataLogDisplayColumn.6=.3.1.8.10&DataLogDisplayColumn.5=.3.1.5.9&DataLogDisplayColumn.7=.3.1.5.8&DataLogDisplayColumn.8=.3.1.8.9"
		oXMLHTTP.Open "POST", "https://" & host & ":6547/datalogconfigure", False 
		oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		oXMLHTTP.SetRequestHeader "Cookie",Cookie
		oXMLHTTP.Send R
		WScript.Echo "APCNewMinutesInterval->NewMinutesInterval=" & NewMinutesInterval

		R="new.RuntimeThreshold=5&old.RuntimeThreshold=0&new..3.1.9.1=02&old..3.1.9.1=02&new..3.1.9.9=180&old..3.1.9.9=180&new..3.3.3.4=0&old..3.3.3.4=0&new.EnableReboot=true&old.EnableReboot=true&new..3.1.9.6=15&old..3.1.9.6=0&new..3.1.9.8=000&old..3.1.9.8=000&new.CommandFileName=select+command+file&old.CommandFileName=select%2Bcommand%2Bfile&new.minute.CommandFileDuration=0&new.second.CommandFileDuration=0&old.minute.CommandFileDuration=0&old.second.CommandFileDuration=-1&new.LogEnable=true&old.LogEnable=true"
		oXMLHTTP.Open "POST", "https://" & Host & ":6547/configuremanually", False 
		oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		oXMLHTTP.SetRequestHeader "Cookie",Cookie
		oXMLHTTP.Send R
		WScript.Echo "APCNewMinutesInterval->Filter Data Log View "
		apcDevice.MinutesInterval=NewMinutesInterval
  	  else 
		WScript.Echo "Error authorization. Bad login or password."
	End If 
   Set oXMLHTTP= Nothing
   WScript.Echo "getAPCSetting cancel."
   debug(Err.Description)
   WScript.Echo "----------------------------------------------------------------------------"
end function 


function setAPCAudibleAlarm(host, login, password, NewAudibleAlarm) 
 On Error Resume Next 
 Err.Clear
	Dim oXMLHTTP
	Dim oStream
	Dim LogSetting

	Set oXMLHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
	oXMLHTTP.Open "POST", "https://" & host & ":6547/j_security_check", 0
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	
	oXMLHTTP.Option(6)=False 
	oXMLHTTP.Option(4)=13056
	oXMLHTTP.Send("j_username="&login&"&j_password="&password)
	Cookie=oXMLHTTP.getResponseHeader("Set-Cookie")
 
	oXMLHTTP.Open "GET", "https://" & host & ":6547/main", False 
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	oXMLHTTP.SetRequestHeader "Cookie",Cookie
	oXMLHTTP.Send R
	If ( InStr(1,oXMLHTTP.responseText,"MenuServlet") > 0 ) Then
		WScript.Echo "Authorization  - OK "
		if(NewAudibleAlarm="0") Then
			R="&new..3.1.9.5=" & NewAudibleAlarm & "&old..3.1.9.5=N"
		 else
			R="&new..3.1.9.5=" & NewAudibleAlarm & "&old..3.1.9.5=0"
		end if
		oXMLHTTP.Open "POST", "https://" & host & ":6547/configure", False 
		oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		oXMLHTTP.SetRequestHeader "Cookie",Cookie
		oXMLHTTP.Send R
		debug("setAPCAudibleAlarm->NewAudibleAlarm=" & NewAudibleAlarm)
		apcDevice.AudibleAlarm=NewAudibleAlarm
  	  else 
		debug("Error authorization. Bad login or password.")
	End If 
   Set oXMLHTTP= Nothing
   WScript.Echo "getAPCSetting cancel."
   debug(Err.Description)
   WScript.Echo "----------------------------------------------------------------------------"
end function 



function setAPCLastBatteryReplacementDate(host, login, password, Month, Year) 
 On Error Resume Next 
 Err.Clear
	Dim oXMLHTTP
	Dim oStream
	Dim LogSetting

	Set oXMLHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
	oXMLHTTP.Open "POST", "https://" & host & ":6547/j_security_check", 0
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	
	oXMLHTTP.Option(6)=False 
	oXMLHTTP.Option(4)=13056
	oXMLHTTP.Send("j_username="&login&"&j_password="&password)
	Cookie=oXMLHTTP.getResponseHeader("Set-Cookie")
 
	oXMLHTTP.Open "GET", "https://" & host & ":6547/main", False 
	oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
	oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
	oXMLHTTP.SetRequestHeader "Cookie",Cookie
	oXMLHTTP.Send R
	If ( InStr(1,oXMLHTTP.responseText,"MenuServlet") > 0 ) Then
		WScript.Echo "Authorization  - OK "
		R="&new.month..3.1.8.3=" & Month & "&new.year..3.1.8.3=" & Year & "&old.month..3.1.8.3=12&old.year..3.1.8.3=9999"
		oXMLHTTP.Open "POST", "https://" & host & ":6547/configure", False 
		oXMLHTTP.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"  
		oXMLHTTP.SetRequestHeader "Connection", "Keep-Alive"
		oXMLHTTP.SetRequestHeader "Cookie",Cookie
		oXMLHTTP.Send R
		apcDevice.LastBatteryReplacementMonth=Month
		apcDevice.LastBatteryReplacementYear=Year
		debug("setAPCLastBatteryReplacementDate->apcDevice.LastBatteryReplacementMonth=" & Month)
		debug("setAPCLastBatteryReplacementDate->apcDevice.LastBatteryReplacementYear=" & Year)
  	  else 
		WScript.Echo "Error authorization. Bad login or password."
	End If 
   Set oXMLHTTP= Nothing
   WScript.Echo "getAPCSetting cancel."
   debug(Err.Description)
   WScript.Echo "----------------------------------------------------------------------------"
end function 

function getAPCNewSetting(host, login, password) 
 On Error Resume Next 
 Err.Clear
   if(sql_open()) Then
	       set Recordset=objConnect.Execute("exec get_point_setting '" & Ip & "'")
       	           apcDevice.MinutesInterval  = Recordset.Fields(11).Value         
                   apcDevice.SecondsInterval  = Recordset.Fields(12).Value         
                   apcDevice.AudibleAlarm     = Recordset.Fields(13).Value         
                   apcDevice.LastBatteryReplacementMonth  = Recordset.Fields(14).Value         
                   apcDevice.LastBatteryReplacementYear   = Recordset.Fields(15).Value         
                   apcDevice.ConnectionType   = Recordset.Fields(16).Value         
                   apcDevice.pbe_login        = Recordset.Fields(17).Value         
                   apcDevice.pbe_password     = Recordset.Fields(18).Value         

 		   debug("getAPCNewSetting->apcDevice.MinutesInterval=" & apcDevice.MinutesInterval)
 		   debug("getAPCNewSetting->apcDevice.MinutesInterval=" & apcDevice.MinutesInterval)
		   debug("getAPCNewSetting->apcDevice.SecondsInterval=" & apcDevice.SecondsInterval) 	
		   debug("getAPCNewSetting->apcDevice.ConnectionType=" & apcDevice.ConnectionType)
		   debug("getAPCNewSetting->apcDevice.LastBatteryReplacementMonth=" & apcDevice.LastBatteryReplacementMonth)	
		   debug("getAPCNewSetting->apcDevice.LastBatteryReplacementYear=" & apcDevice.LastBatteryReplacementYear)	
	           debug("getAPCNewSetting->apcDevice.AudibleAlarm=" & apcDevice.AudibleAlarm)
             sql_close()
  end if 
  debug(Err.Description)
end function 


function updateAPCParametes(host, login, password, apcDevice)
 On Error Resume Next 
  Dim Sql
  if(sql_open=0) Then	
      with apcEvent
 	      Sql="exec apc_update_parameters '" &_
			apcDevice.terminal_id & "','" &_
			apcDevice.ip & "','" &_
			apcDevice.MinutesInterval & "','" &_
			apcDevice.SecondsInterval & "','" &_
		        apcDevice.AudibleAlarm & "','" &_
			apcDevice.LastBatteryReplacementMonth & "','" &_
			apcDevice.LastBatteryReplacementYear & "','" &_
			apcDevice.ConnectionType & "'"
      end with
     debug(sql)
    executeSQL(sql)
   sql_close()
 end If
end function 




sub executeCommand(command)
  On Error Resume Next 
   log("execute command=>" & command)    
   Select Case command
	 Case 255  ' перезагрузка узла 
	    RebootComputer()
	 Case 254  'Отправка лог-файлов
	    SendLogFile(command)
	 Case 253  'Отправка лог-файлов
	    SendLogFile(command)
	 Case 252  'Отправка лог-файлов
           SendLogFile(command)
	 Case 251  'Отправка лог-файлов
           SendLogFile(command)
	 Case 250  'Отправка лог-файлов
           SendLogFile(command)
	 Case 249  ' Получить и обновить данные
		        ClearCommandStatus(Ip) 'сброс флага
			call getAPCSettings(Ip, apcDevice.pbe_login, apcDevice.pbe_password)
			call updateAPCParametes(Ip,  apcDevice.pbe_login, apcDevice.pbe_password, apcDevice)
	 Case 248  ' Установить новые данные  
		         ClearCommandStatus(Ip) 'сброс флага
			 call getAPCNewSetting(Ip, apcDevice.pbe_login, apcDevice.pbe_password)
			 call setAPCNewMinutesInterval(Ip, apcDevice.pbe_login, apcDevice.pbe_password, apcDevice.MinutesInterval ) 
			 call setAPCAudibleAlarm(Ip, apcDevice.pbe_login, apcDevice.pbe_password, apcDevice.AudibleAlarm) 
			 call setAPCLastBatteryReplacementDate(Ip, apcDevice.pbe_login, apcDevice.pbe_password, apcDevice.LastBatteryReplacementMonth, apcDevice.LastBatteryReplacementYear) 
			 call getAPCSettings(Ip, apcDevice.pbe_login, apcDevice.pbe_password)
			 call updateAPCParametes(Ip,  apcDevice.pbe_login, apcDevice.pbe_password, apcDevice)
  End Select	 
end sub


' Загружаем конфигурационный файл
  Timer=60000
  TimerAlert=60000			
  TimerCountMax=20						' количество пустых циклов при отсутсвии проблем с напряжением...
  TimerCount=0			
  LogWrite=1
  command=0
  Ip=GetIpAddress() 						' считываем IP-адрес
  terminal_id=Ip
  TerminalType="3" ' ИПТ
  Start=False
  blocked=0
  PathToData=""			' путь до файлов данных
  Bias=getBias()
  typeOS=GetOsArchitecture
  UPSType=get_ups_type() 
  ModelName=get_model_Name(UPSType) 'модель ИБП
  last_update_dat=Now()
  last_update_event=Now()
   if check_point_reg(terminal_id, TerminalType, Ip, Bias, UPSType)  Then        ' Проверка на зарегистрированность  поинта в базе
	  log(vbCrLf & vbCrLf &"************* Service Started " & LDateTime(Now()) & " **************")
   end if 
     Do Until Not True
'  инициализируем строку подключение  к MSSQL-серверу
	  UPSType=get_ups_type() 
	  ModelName=get_model_Name(UPSType) 'модель ИБП
               TimerCount=TimerCount-1
 	          if TimerCount < 1 Then
  	           TimerCount=TimerCountMax	
	 	    if check_point_reg(terminal_id, TerminalType, Ip, Bias, UPSType)  Then        ' Проверка на зарегистрированность  поинта в базе
			  executeCommand(command)                                                ' выполнение управляющих команд
   	              end if	
	          end If
        	  if UPSType<>"unknow" then
 				   load_log_file(UPSType)                       	                  ' загрузка данных при успешном подключении - вольтаж
				   load_event_file(UPSType)				                  ' загрузка данных при успешном подключении - события
 	            end If

        debug("Пересоединение через  " & TimerAlert )
        WScript.Sleep TimerAlert
 Loop

 set apcData=Nothing
 set apcEvent=Nothing
 set objWMIService=Nothing
 set fso=Nothing
 Set objConnect= Nothing 
 set WshShell= Nothing 

